# What are you creating?

As we talk about getting code to production, we need to consider what that code is. What type of output and supporting assets are you creating? 

Not every data science output is, or should be, a Shiny app, but if the only tool in your toolbox is a hammer, everything looks like a nail. For maximum impact, you need to use the right tool for the job, considering your audience and the purpose of your data science project. In many cases, your data science project will include many different types of outputs all supporting the main deliverable that your stakeholders actually care about. Here we will cover the different types of outputs you can create with R so you can choose the right tools for your needs.

<!--# TODO: Would diagrams be helpful here?  -->

## Scripts

Scripts are R files that contain code that can be run from start to finish without user interaction. They are useful for:

- Data processing pipelines
- Model training and evaluation
- Automated report generation
- Scheduled jobs and batch processing
- ETL (Extract, Transform, Load) workflows

Scripts should be modular, well-documented, and error-handled. They often serve as the foundation for other outputs like static documents or Shiny apps by doing the heavy lifting of data preparation and analysis.

There's not a firm distinction between a script and a static document. I think of a script as a workhorse file that is meant to run without need for a polish layer for visual inspection or reporting. However, at a minimum, include helpful logging and auditing statements in the outputs of your scripts for traceability. 

It's a small step to move from a `.R` script to a [Quarto](https://quarto.org/) or [R Markdown](https://rmarkdown.rstudio.com/) document, and in my mind, well worth it for the benefit of having a rendered output at the conclusion of script run to document the actions and outcomes. Do this by either by inserting your script as a code chunk in a `.qmd` or `.Rmd` file, or using Quarto's script-rendering functionality. 

Scripts can be deployed to Posit Connect Cloud and Posit Connect. Under the hood, Connect uses Quarto for script rendering.

## Static documents

A static document is compiled in batch process and then distributed or shared with your audience. It can be updated programmatically or on a schedule so that the outputs are up to date. [R Markdown](https://rmarkdown.rstudio.com/) and [Quarto](https://quarto.org/) are the most common tools for creating static documents in R. These tools allow you to combine prose and code for literate programming, and have a low learning curve, with most of the syntax being markdown.

Don't let the word "static" fool you; these documents are versatile and can be rich and engaging. Incorporating tools like Javascript or Observable can provide an interactive-type experience. Quarto dashboards or `flexdashboard` (which uses R Markdown under the hood) generate polished dashboards with low effort. Because they don't have an active runtime, static documents are also easier to distribute, and they can be compiled in many types of output formats, including html, PDF, Word, and Powerpoint.

Static documents are great for:

-   ETL scripts
-   Reports
-   Presentations
-   Dashboards
-   Websites
-   Email
-   Tables
-   Plots and figures

Often, one or more static documents on a schedule will be the backbone of a production web application. For example, a document might process upstream data, send an email alert if something is wrong with the data, or otherwise load it to a database for downstream consumption by a web application.

Static documents can be deployed to Posit Connect Cloud, Posit Connect, or GitHub Pages.

<!--# TODO: Do we want to include opinions on Quarto vs R Markdown? -->

## Websites

A website is a type of static document, but worth discussing as a unique output. Quarto produces websites, blogs, and books as an output type. Websites can be a powerful way to share your analyses, reports, and findings with a broader audience. They can be updated automatically and can include interactive elements to engage users.

Websites are great for:

- Sharing comprehensive reports and analyses
- Documenting team or organizational standards
- Hosting blogs or articles
- Publishing books or documentation
- Creating interactive tutorials or learning resources

Websites can be deployed to Posit Connect Cloud, Posit Connect, or GitHub Pages.

## Documents with Shiny runtime

R Markdown and Quarto can incorporate Shiny elements for additional reactivity and interactivity. This addition imposes a runtime requirement, so the documents are no longer static. This type of document is a hybrid between the ease of creating a markdown file with R Markdown or Quarto, and the reactive capabilities of Shiny.

Both Posit Connect Cloud and Posit Connect support deployment of documents with a Shiny runtime.

## APIs

An application programming interface (API) is a way for two or more computer programs to communicate with each other. In plain language, this means that you can wrap up any R function as an API and then call it from another system or program. The other system or program does not have to be using R to access your function. This is the power and flexibility of APIs, allowing simple interoperability between systems.

[Plumber](https://www.rplumber.io/) is an R package that makes it easy to create APIs. You begin with your R function, then use decorators to define the details of the API, including the endpoint, the HTTP method, and the input parameters, and the desired outputs. Plumber utilizes different [serializers](https://www.rplumber.io/articles/rendering-output.html#serializers) to provide different output formats, including text-type outputs such as JSON, XML, html; data formats like csv, RDS, parquet, and feather; and binary formats such as images and PDFs.

Say you have prediction model that you want to share with your organization. You can wrap that model in an API and then your entire organization can submit queries to the API and get prediction responses back. As long as the system that they are using can make an HTTP request, they can use your model. This opens the door to exposing your model to a variety of systems, including data scientists using other programming languages, and other tools such as Excel, Power BI, or Tableau.

Plumber APIs require an R process at runtime, and they can be deployed on Posit Connect Cloud and Posit Connect.

## Models

Models are a crucial component of many production systems, especially in data science and machine learning applications. In R, you can build and deploy models using various packages and frameworks, depending on your needs and the complexity of the model. The [`tidymodels`](https://www.tidymodels.org/) framework is a collection of packages for modeling and machine learning that uses tidy principles. This framework is designed to be extensible to meet most modeling needs.

Models are frequently exposed via an API so that you can make on-demand calls to receive predictions. The [`vetiver`](https://vetiver.posit.co) package is designed to help you version, deploy, and monitor models in production. It can be used to bundle up your model as an API, doing the legwork of converting it into a `plumber` API for you.


## Interactive applications

[Shiny](https://shiny.posit.co/) is an R package that makes it easy to build interactive web applications and dashboards without needing to know html, css, or javascript. Traditionally, Shiny applications require a server-side R runtime, and Posit Connect Cloud or Posit Connect are ideal deployment platforms. Recent development with WebAssembly (Wasm) allows Shiny applications to run in the browser via [shinylive](https://posit-dev.github.io/r-shinylive/). This model, while novel, should be used in production settings with caution. It is important to note that WebAssembly sends all application code and data to the browser, which may not meet security models.

<!--# TODO: Is a discussion around stateful vs stateless applications useful? -->